dot(c(1,2),c(2,3))
x = c(1,3)
y = c(2,3)
x %*% y
exp(1)
source('C:/Users/csdp/Desktop/STAT_497/A3/A3RL/A3_Q2.R', echo=TRUE)
source('C:/Users/csdp/Desktop/STAT_497/A3/A3RL/A3_Q2.R', echo=TRUE)
###Part c)
# helper function x(s,a)
x <- function(s,a){
if(a == -1)
return(c(1,0))
else
return(c(0,1))
}
h <- function(s,a,theta){
return(theta%*%x(s,a))
}
pi <- function(a,s,theta,actionset){
nominator = exp(h(s,a,theta))
denominator = 0
for(b in actionset){
denominator = denominator + exp(h(s,b,theta))
}
return(nominator/denominator)
}
OneRunCorridor <- function(initheta,alphasteptheta,nepis,theseed){
set.seed(theseed)
RewardEachEpisode = vector('numeric',length=nepis)
ProbRightEachEpisode = vector('numeric',length=nepis)
for(k in 1:nepis){
#Simulate episode
}
}
###Part d)
###Part e)
###Part f)
###Part c)
# helper function x(s,a)
x <- function(s,a){
if(a == -1)
return(c(1,0))
else
return(c(0,1))
}
h <- function(s,a,theta){
return(theta%*%x(s,a))
}
pi <- function(a,s,theta,actionset){
nominator = exp(h(s,a,theta))
denominator = 0
for(b in actionset){
denominator = denominator + exp(h(s,b,theta))
}
return(nominator/denominator)
}
OneRunCorridor <- function(initheta,alphasteptheta,nepis,theseed){
set.seed(theseed)
RewardEachEpisode = vector('numeric',length=nepis)
ProbRightEachEpisode = vector('numeric',length=nepis)
for(k in 1:nepis){
#Simulate episode
}
}
###Part d)
###Part e)
###Part f)
# Driver
source("model.r")
# Start game
masterBoard <- array(0, dim = c(3,3,3,3))
statusBoard <- matrix(0, nrow = 3, ncol = 3, byrow = T)
winner <- 0  # Initially a tie
# First move
player <- 1
move <- as.numeric(unlist(strsplit(readline("Enter a move: "), ",")));
forcedMove <- c(move[1], move[2])
player <- player %% 2 + 1
# Debug
cat("--------------------------\n")
printMasterBoard(masterBoard)
# The game continue normally
while (T) {
validMoves <- getValidMove(masterBoard, forcedMove, statusBoard)
if (length(validMoves) == 0)
return (0)
# Some smart method to determine a move instead
move <- as.numeric(unlist(strsplit(readline("Enter a move: "), ",")));
# Play  the move
masterBoard[move[1], move[2], move[3], move[4]] <- player
forcedMove <- c(move[1], move[2])
# Check for win
if(hasWonBoard(masterBoard[move[1], move[2],,], player))
statusBoard[move[1], move[2]] <- player  # Won subBoard
if(hasWonBoard(statusBoard, player))
return (player)  # Won game
player <- player %% 2 + 1  # Change player
# Debug
cat("--------------------------\n")
printMasterBoard(masterBoard)
}
hasWonBoard <- function(board,player){
hasWon <- F
dimension <- length(board[1,])
# First check horizontal
for(row in 1:dimension){
if(board[row,1] == board[row,2] && board[row,2] == board[row,3] && board[row,2] == player){
hasWon <- T
break
}
}
if(hasWon)
return(T)
# Check vertical
for(col in 1:dimension){
if(board[1,col] == board[2,col] && board[2,col] == board[3,col] && board[2,col] == player){
hasWon <- T
break
}
}
if(hasWon)
return(T)
# Check the diagonals
if(board[1,1] == board[2,2] && board[2,2] == board[3,3] && board[2,2] == player)
return(T)
if(board[3,1] == board[2,2] && board[2,2] == board[1,3] && board[2,2] == player)
return(T)
return(F)
}
# Return a list of valid moves
getValidMove <- function(board, forcedMove, boardStatus){
validMove <- list()
fullBoard <- T
# subBoard not won
if (boardStatus[forcedMove[1], forcedMove[2]] == 0){
for (subX in 1:3)
for (subY in 1:3)
if (board[forcedMove[1], forcedMove[2], subX, subY] == 0)
validMove <- append(validMove, list(c(forcedMove[1], forcedMove[2], subX, subY)))  # Add the valid move
fullBoard <- F
}
if (fullBoard == F){
return (validMove)
}
# All moves that are in non-won subBoard and not played
for (x in 1:3)
for (y in 1:3)
if (boardStatus[x, y] == 0)
for (subX in 1:3)
for (subY in 1:3)
if (board[x, y, subX, subY] == 0)
validMove <- append(validMove, list(c(x, y, subX, subY)))  # Add the valid move
return (validMove)
}
# player move on master board
doMove <- function(position,player,board){
if(board[postion[1],position[2],position[3],position[4]] == 0){
board[postion[1],position[2],position[3],position[4]] <- player#Ask MD about positions
}
return(board)
}
# prints single individual tile of TTT
printBoard <- function(board){
for(i in 1:3){
cat(board[i,1]," | ",board[i,2]," | ",board[i,3],"\n")
if(i != 3){
cat("--------------\n")
}
}
}
# removes first instance of element from a list and returns that list
removeElt <- function(list,elt){
index <- 1
while(index <= length(list)){
if(list[[index]][1] == elt[1] && list[[index]][2] == elt[2]
&& list[[index]][3] == elt[3] && list[[index]][4] == elt[4])
{
list[[index]] <- NULL
return(list)
}
index <- index + 1
}
return(list)
}
# note [a,b,,] -> a,b are the principal matrix indeces
printMasterBoard <- function(masterBoard){
for(i in 1:3){
for(j in 1:3){
cat(c(masterBoard[i,1,j,], " | ", masterBoard[i,2,j,], " | ", masterBoard[i,3,j,],"\n"))
}
if(i != 3){
cat("--------------------------\n")
}
}
}
# Driver
source("model.r")
# Start game
masterBoard <- array(0, dim = c(3,3,3,3))
statusBoard <- matrix(0, nrow = 3, ncol = 3, byrow = T)
winner <- 0  # Initially a tie
# First move
player <- 1
move <- as.numeric(unlist(strsplit(readline("Enter a move: "), ",")));
forcedMove <- c(move[1], move[2])
player <- player %% 2 + 1
# Debug
cat("--------------------------\n")
printMasterBoard(masterBoard)
# The game continue normally
while (T) {
validMoves <- getValidMove(masterBoard, forcedMove, statusBoard)
if (length(validMoves) == 0)
return (0)
# Some smart method to determine a move instead
move <- as.numeric(unlist(strsplit(readline("Enter a move: "), ",")));
# Play  the move
masterBoard[move[1], move[2], move[3], move[4]] <- player
forcedMove <- c(move[1], move[2])
# Check for win
if(hasWonBoard(masterBoard[move[1], move[2],,], player))
statusBoard[move[1], move[2]] <- player  # Won subBoard
if(hasWonBoard(statusBoard, player))
return (player)  # Won game
player <- player %% 2 + 1  # Change player
# Debug
cat("--------------------------\n")
printMasterBoard(masterBoard)
}
# Start game
masterBoard <- array(0, dim = c(3,3,3,3))
statusBoard <- matrix(0, nrow = 3, ncol = 3, byrow = T)
winner <- 0  # Initially a tie
# First move
player <- 1
move <- as.numeric(unlist(strsplit(readline("Enter a move: "), ",")));
forcedMove <- c(move[1], move[2])
player <- player %% 2 + 1
# Debug
cat("--------------------------\n")
printMasterBoard(masterBoard)
# The game continue normally
while (T) {
validMoves <- getValidMove(masterBoard, forcedMove, statusBoard)
if (length(validMoves) == 0)
return (0)
# Some smart method to determine a move instead
move <- as.numeric(unlist(strsplit(readline("Enter a move: "), ",")));
# Play  the move
masterBoard[move[1], move[2], move[3], move[4]] <- player
forcedMove <- c(move[1], move[2])
# Check for win
if(hasWonBoard(masterBoard[move[1], move[2],,], player))
statusBoard[move[1], move[2]] <- player  # Won subBoard
if(hasWonBoard(statusBoard, player))
return (player)  # Won game
player <- player %% 2 + 1  # Change player
# Debug
cat("--------------------------\n")
printMasterBoard(masterBoard)
}
hasWonBoard <- function(board,player){
hasWon <- F
dimension <- length(board[1,])
# First check horizontal
for(row in 1:dimension){
if(board[row,1] == board[row,2] && board[row,2] == board[row,3] && board[row,2] == player){
hasWon <- T
break
}
}
if(hasWon)
return(T)
# Check vertical
for(col in 1:dimension){
if(board[1,col] == board[2,col] && board[2,col] == board[3,col] && board[2,col] == player){
hasWon <- T
break
}
}
if(hasWon)
return(T)
# Check the diagonals
if(board[1,1] == board[2,2] && board[2,2] == board[3,3] && board[2,2] == player)
return(T)
if(board[3,1] == board[2,2] && board[2,2] == board[1,3] && board[2,2] == player)
return(T)
return(F)
}
# Return a list of valid moves
getValidMove <- function(board, forcedMove, boardStatus){
validMove <- list()
fullBoard <- T
# subBoard not won
if (boardStatus[forcedMove[1], forcedMove[2]] == 0){
for (subX in 1:3)
for (subY in 1:3)
if (board[forcedMove[1], forcedMove[2], subX, subY] == 0)
validMove <- append(validMove, list(c(forcedMove[1], forcedMove[2], subX, subY)))  # Add the valid move
fullBoard <- F
}
if (fullBoard == F){
return (validMove)
}
# All moves that are in non-won subBoard and not played
for (x in 1:3)
for (y in 1:3)
if (boardStatus[x, y] == 0)
for (subX in 1:3)
for (subY in 1:3)
if (board[x, y, subX, subY] == 0)
validMove <- append(validMove, list(c(x, y, subX, subY)))  # Add the valid move
return (validMove)
}
# player move on master board
doMove <- function(position,player,board){
if(board[postion[1],position[2],position[3],position[4]] == 0){
board[postion[1],position[2],position[3],position[4]] <- player
}
return(board)
}
# prints single individual tile of TTT
printBoard <- function(board){
for(i in 1:3){
cat(board[i,1]," | ",board[i,2]," | ",board[i,3],"\n")
if(i != 3){
cat("--------------\n")
}
}
}
# removes first instance of element from a list and returns that list
removeElt <- function(list,elt){
index <- 1
while(index <= length(list)){
if(list[[index]][1] == elt[1] && list[[index]][2] == elt[2]
&& list[[index]][3] == elt[3] && list[[index]][4] == elt[4])
{
list[[index]] <- NULL
return(list)
}
index <- index + 1
}
return(list)
}
# note [a,b,,] -> a,b are the principal matrix indeces
printMasterBoard <- function(masterBoard){
for(i in 1:3){
for(j in 1:3){
cat(c(masterBoard[i,1,j,], " | ", masterBoard[i,2,j,], " | ", masterBoard[i,3,j,],"\n"))
}
if(i != 3){
cat("--------------------------\n")
}
}
}
# Driver
source("model.r")
# Start game
masterBoard <- array(0, dim = c(3,3,3,3))
statusBoard <- matrix(0, nrow = 3, ncol = 3, byrow = T)
winner <- 0  # Initially a tie
# First move
player <- 1
# io method
# move <- as.numeric(unlist(strsplit(readline("Enter a move: "), ",")));
# random method
move <- sample(c(1,2,3), size = 4, replace = T)
masterBoard[move[1], move[2], move[3], move[4]] <- player
forcedMove <- c(move[3], move[4])
player <- player %% 2 + 1
# Debug
cat("--------------------------\n")
printMasterBoard(masterBoard)
# The game continue normally
while (T) {
validMoves <- getValidMove(masterBoard, forcedMove, statusBoard)
if (length(validMoves) == 0)
break
# Some smart method to determine a move instead
# io method
# move <- as.numeric(unlist(strsplit(readline("Enter a move: "), ",")));
# random move method
move <- sample(validMoves, size = 1)
move <- move[[1]]
# Play  the move
masterBoard[move[1], move[2], move[3], move[4]] <- player
forcedMove <- c(move[3], move[4])
# Check for win
if(hasWonBoard(masterBoard[move[1], move[2],,], player))
statusBoard[move[1], move[2]] <- player  # Won subBoard
if(hasWonBoard(statusBoard, player)){
winner <- player # Won game
break
}
player <- player %% 2 + 1  # Change player
# Debug
cat("**************************\n")
printMasterBoard(masterBoard)
cat("**************************\n")
printBoard(statusBoard)
}
# Debug
cat("**************************\n")
printMasterBoard(masterBoard)
cat("**************************\n")
printBoard(statusBoard)
if(winner == 0){
cat("Draw\n")
} else if(winner == 1){
cat("Player 1 wins\n")
} else{
cat("Player 2 wins\n")
}
